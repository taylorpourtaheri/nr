final_results <- c()
# generate protein association network
string_db <- STRINGdb::STRINGdb$new(version="10",
species=9606,
score_threshold=edge_conf_score_min)
ppi <- string_db$get_graph()
# map DEA results onto ppi network
ppi_painted <- df_to_vert_attr(graph=ppi, df=deg, common="STRING_id",
attr_name = c("Symbol", "ID", "logFC", "AveExpr",
"t", "P.Value", "adj.P.Val", "B"))
# subset the graph to only include nodes that meet thresholds
ppi_painted_filt <- attribute_filter(ppi_painted,
abs(logFC) > log2(logFC_min) & adj.P.Val < pvalue_min)
# select the connected subgraph
ppi_painted_filt_giant <- connected_subgraph(ppi_painted_filt)
# calculate centrality
if (method == 'centrality'){
ppi_painted_filt_giant <- calc_centrality(ppi_painted_filt_giant,
bt=TRUE, len = -1)
}
# write final graph
if (export_network == TRUE){
igraph::write_graph(ppi_painted_filt_giant,
file=glue("data/network_result_{edge_conf_score_min}.graphml"),
format = "graphml")
}
# find the STRING ID for the causal gene
xref <- data.frame(symbol = causal_gene_symbol)
xref <- string_db$map(xref, "symbol", removeUnmappedRows=T, quiet=T)
# calculate similarity of each node and slice out the causal gene
sim <- igraph::similarity(ppi)
index <- which(V(ppi)$name == xref$STRING_id)
index
causal_sim <- sim[index,]
# make scores a named vector
names(causal_sim) <- V(ppi)$name
# get the scores associated with the subnetwork
pred_scores <- causal_sim[V(ppi_painted_filt_giant)$name]
mean_pred_score <- mean(pred_scores)
# create a key mapping STRING id to gene symbol for all genes
key <- data.frame(symbol = deg$Symbol)
key <- string_db$map(key, "symbol", removeUnmappedRows=T, quiet=T)
# select top genes and annotate for readability
top_genes <- sort(pred_scores, decreasing = TRUE)
View(top_genes)
top_genes_df <- data.frame(score = top_genes,
STRING_id  = names(top_genes))
top_genes_df <- left_join(top_genes_df, key)
rownames(top_genes_df) <- NULL
# estimate uncertainty with a random draw of the full ppi graph
n_draws <- length(V(ppi_painted_filt_giant))
samples <- lapply(1:n_sim, function(x) sample(causal_sim, n_draws))
sample_means <- sapply(samples, mean)
# calculate p
score_pval <- sum(sample_means > mean_pred_score) / n_sim
# save results
final_results[['network']] <- ppi_painted_filt_giant
final_results[['top_genes']] <- top_genes_df
final_results[['mean_score']] <- mean_pred_score
final_results[['pvalue']] <- score_pval
# load relevant packages
library(STRINGdb)
library(igraph)
library(ggplot2)
library(dplyr)
library(glue)
# load all package functions
load_all()
# read differential expression data (annotated with gene symbols)
de_string <- readRDS('data/de_string.RDS')
# list of subtypes
subtypes <- names(de_string)
.x <- de_string[[2]]
.y <- subtypes[[2]]
# load relevant packages
library(STRINGdb)
library(igraph)
library(ggplot2)
library(dplyr)
library(glue)
# load all package functions
load_all()
# read differential expression data (annotated with gene symbols)
de_string <- readRDS('data/de_string.RDS')
# list of subtypes
subtypes <- names(de_string)
.x <- de_string[[2]]
.y <- subtypes[[2]]
deg = .x
edge_conf_score_min = 950
logFC_min = 1.5
pvalue_min = 0.05
method = 'centrality'
causal_gene_symbol = .y
export_network = FALSE
n_sim = 9999
# load relevant packages
library(STRINGdb)
library(igraph)
library(ggplot2)
library(dplyr)
library(glue)
# load all package functions
load_all()
# read differential expression data (annotated with gene symbols)
de_string <- readRDS('data/de_string.RDS')
# list of subtypes
subtypes <- names(de_string)
# .x <- de_string[[2]]
# .y <- subtypes[[2]]
# deg = .x
# edge_conf_score_min = 950
# logFC_min = 1.5
# pvalue_min = 0.05
# method = 'centrality'
# causal_gene_symbol = .y
# export_network = FALSE
# n_sim = 9999
# call wrapper
subtype_results <- purrr::map2(de_string, subtypes,
~network_pipeline(deg = .x,
edge_conf_score_min = 950,
logFC_min = 1.5,
pvalue_min = 0.05,
method = 'centrality',
causal_gene_symbol = .y,
export_network = FALSE,
n_sim = 9999))
# load relevant packages
library(STRINGdb)
library(igraph)
library(ggplot2)
library(dplyr)
library(glue)
# load all package functions
load_all()
# read differential expression data (annotated with gene symbols)
de_string <- readRDS('data/de_string.RDS')
# list of subtypes
subtypes <- names(de_string)
.x <- de_string[[2]]
.y <- subtypes[[2]]
deg = .x
edge_conf_score_min = 950
logFC_min = 1.5
pvalue_min = 0.05
method = 'centrality'
causal_gene_symbol = .y
export_network = FALSE
n_sim = 9999
# internal check
print(causal_gene_symbol)
# list to store results
final_results <- c()
# generate protein association network
string_db <- STRINGdb::STRINGdb$new(version="10",
species=9606,
score_threshold=edge_conf_score_min)
ppi <- string_db$get_graph()
View(deg)
subtypes
View(key)
# map DEA results onto ppi network
ppi_painted <- df_to_vert_attr(graph=ppi, df=deg, common="STRING_id",
attr_name = c("Symbol", "ID", "logFC", "AveExpr",
"t", "P.Value", "adj.P.Val", "B"))
# subset the graph to only include nodes that meet thresholds
ppi_painted_filt <- attribute_filter(ppi_painted,
abs(logFC) > log2(logFC_min) & adj.P.Val < pvalue_min)
# select the connected subgraph
ppi_painted_filt_giant <- connected_subgraph(ppi_painted_filt)
# calculate centrality
if (method == 'centrality'){
ppi_painted_filt_giant <- calc_centrality(ppi_painted_filt_giant,
bt=TRUE, len = -1)
}
# write final graph
if (export_network == TRUE){
igraph::write_graph(ppi_painted_filt_giant,
file=glue("data/network_result_{edge_conf_score_min}.graphml"),
format = "graphml")
}
# find the STRING ID for the causal gene
xref <- data.frame(symbol = causal_gene_symbols)
causal_gene_symbols = .y
# internal check
print(causal_gene_symbols)
.x <- de_string[[1]]
.y <- subtypes[[1]]
# internal check
print(causal_gene_symbols)
# load relevant packages
library(STRINGdb)
library(igraph)
library(ggplot2)
library(dplyr)
library(glue)
# load all package functions
load_all()
# read differential expression data (annotated with gene symbols)
de_string <- readRDS('data/de_string.RDS')
# list of subtypes - fix to match true gene names (confirmed in publication)
subtypes <- c('MYC', c('BCAT1', 'BCAT2'))
.x <- de_string[[1]]
.y <- subtypes[[1]]
deg = .x
edge_conf_score_min = 950
logFC_min = 1.5
pvalue_min = 0.05
method = 'centrality'
causal_gene_symbols = .y
export_network = FALSE
n_sim = 9999
subtypes[[1]]
# internal check
print(causal_gene_symbols)
# list to store results
final_results <- c()
# generate protein association network
string_db <- STRINGdb::STRINGdb$new(version="10",
species=9606,
score_threshold=edge_conf_score_min)
ppi <- string_db$get_graph()
# map DEA results onto ppi network
ppi_painted <- df_to_vert_attr(graph=ppi, df=deg, common="STRING_id",
attr_name = c("Symbol", "ID", "logFC", "AveExpr",
"t", "P.Value", "adj.P.Val", "B"))
# subset the graph to only include nodes that meet thresholds
ppi_painted_filt <- attribute_filter(ppi_painted,
abs(logFC) > log2(logFC_min) & adj.P.Val < pvalue_min)
# select the connected subgraph
ppi_painted_filt_giant <- connected_subgraph(ppi_painted_filt)
# calculate centrality
if (method == 'centrality'){
ppi_painted_filt_giant <- calc_centrality(ppi_painted_filt_giant,
bt=TRUE, len = -1)
}
# write final graph
if (export_network == TRUE){
igraph::write_graph(ppi_painted_filt_giant,
file=glue("data/network_result_{edge_conf_score_min}.graphml"),
format = "graphml")
}
causal_gene_symbol = .y
View(de_string[[1]])
subtypes
# list of subtypes - fix to match true gene names (confirmed in publication)
names(de_string)
View(de_string[[1]])
View(de_string[['BCAT']])
View(de_string[['E2F3']])
View(de_string[['RAS']])
View(de_string[['SRC']])
View(de_string[['BCAT']])
# load relevant packages
library(STRINGdb)
library(igraph)
library(ggplot2)
library(dplyr)
library(glue)
# load all package functions
load_all()
# read differential expression data (annotated with gene symbols)
de_string <- readRDS('data/de_string.RDS')
# list of subtypes - fix to match true gene names (need to confirm in publication)
names(de_string)
subtypes <- c('MYC', 'BCAT2', 'E2F3', 'HRAS', 'SRC')
# .x <- de_string[[1]]
# .y <- subtypes[[1]]
# deg = .x
# edge_conf_score_min = 950
# logFC_min = 1.5
# pvalue_min = 0.05
# method = 'centrality'
# causal_gene_symbol = .y
# export_network = FALSE
# n_sim = 9999
# call wrapper
subtype_results <- purrr::map2(de_string, subtypes,
~network_pipeline(deg = .x,
edge_conf_score_min = 950,
logFC_min = 1.5,
pvalue_min = 0.05,
method = 'centrality',
causal_gene_symbol = .y,
export_network = FALSE,
n_sim = 9999))
View(subtype_results)
gene_results <- purrr::map(subtype_results, ~.[['top_genes']])
View(gene_results[['MYC']])
View(gene_results[['BCAT']])
View(gene_results[['E2F3']])
View(gene_results[['RAS']])
View(gene_results[['SRC']])
View(de_string$BCAT)
use_readme_rmd()
build_readme()
build_readme()
purrr::walk(gene_results, ~length(.))
purrr::map(gene_results, ~length(.))
purrr::map(gene_results, ~nrow(.))
.x <- de_string[[2]]
.y <- subtypes[[2]]
.y
# internal check
print(causal_gene_symbol)
deg = .x
edge_conf_score_min = 950
logFC_min = 1.5
pvalue_min = 0.05
method = 'centrality'
causal_gene_symbol = .y
export_network = FALSE
n_sim = 9999
# internal check
print(causal_gene_symbol)
# list to store results
final_results <- c()
# generate protein association network
string_db <- STRINGdb::STRINGdb$new(version="10",
species=9606,
score_threshold=edge_conf_score_min)
ppi <- string_db$get_graph()
# map DEA results onto ppi network
ppi_painted <- df_to_vert_attr(graph=ppi, df=deg, common="STRING_id",
attr_name = c("Symbol", "ID", "logFC", "AveExpr",
"t", "P.Value", "adj.P.Val", "B"))
View(V(ppi_painted))
View(V(ppi_painted)$name)
# find the STRING ID for the causal gene
xref <- data.frame(symbol = causal_gene_symbol)
xref <- string_db$map(xref, "symbol", removeUnmappedRows=T, quiet=T)
xref$STRING_id
a <- igraph::as_data_frame(ppi_painted, what = 'vertices')
View(a)
# subset the graph to only include nodes that meet thresholds
ppi_painted_filt <- attribute_filter(ppi_painted,
abs(logFC) > log2(logFC_min) & adj.P.Val < pvalue_min)
b <- igraph::as_data_frame(ppi_painted_filt, what = 'vertices')
View(b)
# select the connected subgraph
ppi_painted_filt_giant <- connected_subgraph(ppi_painted_filt)
# calculate centrality
if (method == 'centrality'){
ppi_painted_filt_giant <- calc_centrality(ppi_painted_filt_giant,
bt=TRUE, len = -1)
}
# calculate similarity of each node and slice out the causal gene row
sim <- igraph::similarity(ppi)
?igraph::similarity
igraph::similarity
igraph::similarity.jaccard
xref
# calculate similarity of each node and slice out the causal gene row
sim <- igraph::similarity(ppi, method = sim_method)
sim_method = 'jaccard'
# calculate similarity of each node and slice out the causal gene row
sim <- igraph::similarity(ppi, method = sim_method)
index <- which(V(ppi)$name == xref$STRING_id)
causal_sim <- sim[index,]
# make scores a named vector
names(causal_sim) <- V(ppi)$name
View(causal_sim)
any(causal_sim != 0)
sum(causal_sim != 0)
xref
'9606.ENSP00000322991' %in% names(causal_sim)
causal_sim['9606.ENSP00000322991']
causal_sim[causal_sim != 0]
length(causal_sim[causal_sim != 0])
# get the scores associated with the subnetwork
pred_scores <- causal_sim[V(ppi_painted_filt_giant)$name]
View(pred_scores)
V(ppi_painted_filt_giant)$name %>% length
plot(subtype_results$BCAT$network)
purrr::map(gene_results, ~nrow(.))
plot(subtype_results$MYC$network)
plot(subtype_results$SRC$network)
# load relevant packages
library(STRINGdb)
library(igraph)
library(ggplot2)
library(dplyr)
library(glue)
# load all package functions
load_all()
# read differential expression data (annotated with gene symbols)
de_string <- readRDS('data/de_string.RDS')
# list of subtypes - fix to match true gene names (need to confirm in publication)
names(de_string)
subtypes <- c('MYC', 'BCAT1', 'E2F3', 'HRAS', 'SRC')
# call wrapper
subtype_results <- purrr::map2(de_string, subtypes,
~network_pipeline(deg = .x,
edge_conf_score_min = 950,
logFC_min = 1.5,
pvalue_min = 0.05,
method = 'centrality',
causal_gene_symbol = .y,
export_network = FALSE,
sim_method = 'jaccard',
n_sim = 9999))
View(subtype_results)
gene_results <- purrr::map(subtype_results, ~.[['top_genes']])
purrr::map(gene_results, ~nrow(.))
# Observations from DEA results:
# MYC DEA results show good results for MYC (high log2FC/low p)
# BCAT DEA results show negative log2FC/high p for both BCAT1 and BCAT2
# ranked in the 3000-4500 range by adjusted p-value
# ends up being removed in the network filtering step
# only 11 genes in the final filtered giant component network
# also only has 24 non-zero similarity scores in the entire full ppi network
plot(subtype_results$BCAT$network)
# E2F3 DEA results show a negative log2FC/high p for E2F3,
# but log2FC of 2 with low p for E2F7
# RAS DEA results show several RAS isoforms are significant (HRAS listed in paper)
# SRC DEA results show good results for SRC (high log2FC/low p)
# load relevant packages
library(STRINGdb)
library(igraph)
library(ggplot2)
library(dplyr)
library(glue)
# load all package functions
load_all()
# read differential expression data (annotated with gene symbols)
de_string <- readRDS('data/de_string.RDS')
# list of subtypes - fix to match true gene names (need to confirm in publication)
names(de_string)
causal_genes <- c('MYC', 'BCAT2', 'E2F3', 'HRAS', 'SRC')
# call wrapper
subtype_results <- purrr::map2(de_string, causal_genes,
~network_pipeline(deg = .x,
edge_conf_score_min = 950,
logFC_min = 1.5,
pvalue_min = 0.05,
method = 'centrality',
causal_gene_symbol = .y,
export_network = FALSE,
sim_method = 'jaccard',
n_sim = 9999))
View(subtype_results)
gene_results <- purrr::map(subtype_results, ~.[['top_genes']])
purrr::map(gene_results, ~nrow(.))
# Observations from DEA results:
# MYC DEA results show good results for MYC (high log2FC/low p)
# BCAT DEA results show negative log2FC/high p for both BCAT1 and BCAT2
# ranked in the 3000-4500 range by adjusted p-value
# ends up being removed in the network filtering step
# only 11 genes in the final filtered giant component network
# also only has 24 non-zero similarity scores in the entire full ppi network
plot(subtype_results$BCAT$network)
# E2F3 DEA results show a negative log2FC/high p for E2F3,
# but log2FC of 2 with low p for E2F7
# RAS DEA results show several RAS isoforms are significant (HRAS listed in paper)
# SRC DEA results show good results for SRC (high log2FC/low p)
install.packages('STRINGdb')
install.packages('STRINGdb')
install.packages('STRINGdb')
install.packages("STRINGdb")
sessionInfo()
# BCAT DEA results show negative log2FC/high p for both BCAT1 and BCAT2
# ranked in the 3000-4500 range by adjusted p-value
# end up being removed in the network filtering step
# only 11 genes in the final filtered giant component network
# also only has 24 non-zero similarity scores in the entire full ppi network??
# how would this change when adjusting the edge_conf_score_min?
plot(subtype_results$BCAT$network)
document()
devtools::document()
check()
library(devtools)
check()
usethis::use_package('igraph')
usethis::use_package('STRINGdb')
usethis::use_vignette("noderank-vignette")
usethis::use_vignette("noderank-_")
usethis::use_vignette("noderank_vignette")
devtools::build()
vignette('noderank')
vignette(package = 'noderank')
devtools::install()
vignette(package = 'noderank')
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
?noderank::attribute_filter
library(ggnetwork)
network <- subtype_results$MYC$network
ggnetwork(network, layout = "fruchtermanreingold", cell.jitter = 0.75)
install.packages('intergraph')
library(intergraph)
ggnetwork(network, layout = "fruchtermanreingold", cell.jitter = 0.75)
?ggnetwork
ggnetwork(network, layout = "fruchtermanreingold", cell.jitter = 0.75,
igraph_layout_modifier = TRUE)
class(network)
ggplot(ggnetwork(network))
purrr::map(gene_results, ~nrow(.))
plot(network)
ggplot(ggnetwork(network))
ggplot(ggnetwork(network)) +
geom_nodes()
head(ggnetwork(network))
ggplot(ggnetwork(network), aes(x = x, y = y)) +
geom_nodes() +
geom_edges()
ggplot(ggnetwork(network), aes(x = x, y = y, xend = xend, yend = yend)) +
geom_nodes() +
geom_edges()
use_readme_rmd()
build_readme()

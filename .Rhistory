saveRDS(results, 'results/MYC/parameter_grid_pvalue_logFC.RDS')
openxlsx::write.xlsx(results, 'results/MYC/parameter_grid_pvalue_logFC.xlsx')
library(magrittr)
library(textshape)
library(ggplot2)
library(dplyr)
library(tidyr)
library(tictoc) # to assess performance of parallel processing
devtools::load_all()
# Load differential expression data (annotated with gene symbols)
de_string <- readRDS('data/de_string_v11.RDS')
# select HRAS condition as an example
HRAS_de <- de_string$RAS
deg <- RAS_de
target <- 'HRAS'
# generate parameter grid
pipeline_vec <- c('centrality')
connected_filter <- c('TRUE', 'FALSE')
threshold_vec <- c(950)
logFC_vec <- seq(1.0, 2.0, 0.1)
Adj.P_vec <- seq(0.005, 0.05, 0.005)
# single example
# pipeline_vec <- c('centrality')
# connected_filter <- c('TRUE', 'FALSE')
# threshold_vec <- c(950)
# logFC_vec <- 2.0
# Adj.P_vec <- 0.05
parameter_grid <- expand.grid(pipeline = pipeline_vec,
connected_filter = connected_filter,
threshold=threshold_vec,
logFC=logFC_vec,
Adj.P=Adj.P_vec)
# run function for centrality
tic()
results <- parameter_grid(deg = RAS_de,
target = 'HRAS',
grid = parameter_grid,
n_cores = 4,
weighted = FALSE)
toc()
saveRDS(results, 'results/HRAS/parameter_grid_pvalue_logFC.RDS')
openxlsx::write.xlsx(results, 'results/HRAS/parameter_grid_pvalue_logFC.xlsx')
# explore results ---------------------------------------------------------
# best <- group_by(results, pipeline) %>% top_n(1, z_score)
#
#
# ggplot(results, aes(x = Adj.P, y = z_score, group = pipeline)) +
#     geom_line(aes(color = pipeline)) +
#     geom_point(size = 1.75) +
#     geom_point(data = best, color = 'red', size = 1.75) +
#     facet_grid(. ~logFC, scales = 'free') +
#     theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 1)) +
#     scale_color_manual(values = c('#F8766D', '#00BFC4'),
#                        labels = c("Centrality", "Propagation")) +
#     labs(title = 'Z-score vs p-value, by method pipeline',
#          x = 'Adjusted p-value threshold',
#          y = 'Z-score',
#          color = 'Pipeline')
# ggsave('results/parameter_grid_pvalue.png', width = 14, height = 5)
#
# ggplot(results %>% filter(pipeline == 'centrality'),
#        aes(x = Adj.P, y = z_score, group = pipeline)) +
#     geom_line(color = '#F8766D') +
#     geom_point(size = 1.75) +
#     geom_point(data = best %>% filter(pipeline == 'centrality'),
#                color = 'red', size = 1.75) +
#     facet_grid(. ~logFC, scales = 'free') +
#     theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 1)) +
#     labs(title = 'Z-score vs p-value, network centrality pipeline',
#          subtitle = 'Metric: betweenness',
#          x = 'Adjusted p-value threshold',
#          y = 'Z-score')
# ggsave('results/parameter_grid_pvalue_centrality.png', width = 15, height = 4)
#
# ggplot(results %>% filter(pipeline == 'propagation'),
#        aes(x = Adj.P, y = z_score, group = pipeline)) +
#     geom_line(color = '#00BFC4') +
#     geom_point(size = 1.75) +
#     geom_point(data = best %>% filter(pipeline == 'propagation'),
#                color = 'red', size = 1.75) +
#     facet_grid(. ~logFC, scales = 'free') +
#     theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 1)) +
#     labs(title = 'Z-score vs p-value, network propagation pipeline',
#          subtitle = 'Metric: diffusion (raw)',
#          x = 'Adjusted p-value threshold',
#          y = 'Z-score')
# ggsave('results/parameter_grid_pvalue_propagation.png', width = 15, height = 4)
# -------------------------------------------------------------------------
# with heatmap()
results_clip <- results %>% select(logFC, Adj.P, z_score)
results_mat <- results_clip %>%
# Convert long-form to wide-form
spread(key = logFC, value = z_score) %>%
column_to_rownames('Adj.P') %>%
as.matrix
heatmap(results_mat, Colv = NA, Rowv = NA, scale = "column")
# with ggplot
ggplot(results %>% filter(connected_filter == TRUE), aes(x = logFC, y = Adj.P)) +
geom_tile(aes(fill = z_score)) +
geom_text(aes(label = round(score_pval, 3))) +
scale_fill_continuous(low = 'white', high = '#0072B2') +
labs(title = 'Z-score vs. log fold-change and adjusted p-value, centrality pipeline',
subtitle = 'Metric: betweenness, connected_filter = TRUE',
x = 'Log Fold-Change',
y = 'Adjusted p-value',
fill = 'Z-score')
ggsave('results/HRAS/parameter_grid_pvalue_logFC_heatmap_TRUE.png', width = 15, height = 8)
library(magrittr)
library(textshape)
library(ggplot2)
library(dplyr)
library(tidyr)
library(tictoc) # to assess performance of parallel processing
devtools::load_all()
# Load differential expression data (annotated with gene symbols)
de_string <- readRDS('data/de_string_v11.RDS')
# select HRAS condition as an example
HRAS_de <- de_string$RAS
deg <- RAS_de
target <- 'HRAS'
# generate parameter grid
pipeline_vec <- c('centrality')
connected_filter <- c('TRUE', 'FALSE')
threshold_vec <- c(950)
logFC_vec <- seq(1.0, 2.0, 0.1)
Adj.P_vec <- seq(0.005, 0.05, 0.005)
# single example
# pipeline_vec <- c('centrality')
# connected_filter <- c('TRUE', 'FALSE')
# threshold_vec <- c(950)
# logFC_vec <- 2.0
# Adj.P_vec <- 0.05
parameter_grid <- expand.grid(pipeline = pipeline_vec,
connected_filter = connected_filter,
threshold=threshold_vec,
logFC=logFC_vec,
Adj.P=Adj.P_vec)
# run function for centrality
tic()
results <- parameter_grid(deg = RAS_de,
target = 'HRAS',
grid = parameter_grid,
n_cores = 4,
weighted = FALSE)
toc()
saveRDS(results, 'results/HRAS/parameter_grid_pvalue_logFC.RDS')
openxlsx::write.xlsx(results, 'results/HRAS/parameter_grid_pvalue_logFC.xlsx')
# explore results ---------------------------------------------------------
# best <- group_by(results, pipeline) %>% top_n(1, z_score)
#
#
# ggplot(results, aes(x = Adj.P, y = z_score, group = pipeline)) +
#     geom_line(aes(color = pipeline)) +
#     geom_point(size = 1.75) +
#     geom_point(data = best, color = 'red', size = 1.75) +
#     facet_grid(. ~logFC, scales = 'free') +
#     theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 1)) +
#     scale_color_manual(values = c('#F8766D', '#00BFC4'),
#                        labels = c("Centrality", "Propagation")) +
#     labs(title = 'Z-score vs p-value, by method pipeline',
#          x = 'Adjusted p-value threshold',
#          y = 'Z-score',
#          color = 'Pipeline')
# ggsave('results/parameter_grid_pvalue.png', width = 14, height = 5)
#
# ggplot(results %>% filter(pipeline == 'centrality'),
#        aes(x = Adj.P, y = z_score, group = pipeline)) +
#     geom_line(color = '#F8766D') +
#     geom_point(size = 1.75) +
#     geom_point(data = best %>% filter(pipeline == 'centrality'),
#                color = 'red', size = 1.75) +
#     facet_grid(. ~logFC, scales = 'free') +
#     theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 1)) +
#     labs(title = 'Z-score vs p-value, network centrality pipeline',
#          subtitle = 'Metric: betweenness',
#          x = 'Adjusted p-value threshold',
#          y = 'Z-score')
# ggsave('results/parameter_grid_pvalue_centrality.png', width = 15, height = 4)
#
# ggplot(results %>% filter(pipeline == 'propagation'),
#        aes(x = Adj.P, y = z_score, group = pipeline)) +
#     geom_line(color = '#00BFC4') +
#     geom_point(size = 1.75) +
#     geom_point(data = best %>% filter(pipeline == 'propagation'),
#                color = 'red', size = 1.75) +
#     facet_grid(. ~logFC, scales = 'free') +
#     theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 1)) +
#     labs(title = 'Z-score vs p-value, network propagation pipeline',
#          subtitle = 'Metric: diffusion (raw)',
#          x = 'Adjusted p-value threshold',
#          y = 'Z-score')
# ggsave('results/parameter_grid_pvalue_propagation.png', width = 15, height = 4)
# -------------------------------------------------------------------------
# with heatmap()
results_clip <- results %>% select(logFC, Adj.P, z_score)
results_mat <- results_clip %>%
# Convert long-form to wide-form
spread(key = logFC, value = z_score) %>%
column_to_rownames('Adj.P') %>%
as.matrix
heatmap(results_mat, Colv = NA, Rowv = NA, scale = "column")
# with ggplot
ggplot(results %>% filter(connected_filter == TRUE), aes(x = logFC, y = Adj.P)) +
geom_tile(aes(fill = z_score)) +
geom_text(aes(label = round(score_pval, 3))) +
scale_fill_continuous(low = 'white', high = '#0072B2') +
labs(title = 'Z-score vs. log fold-change and adjusted p-value, centrality pipeline',
subtitle = 'Metric: betweenness, connected_filter = TRUE',
x = 'Log Fold-Change',
y = 'Adjusted p-value',
fill = 'Z-score')
ggsave('results/HRAS/parameter_grid_pvalue_logFC_heatmap_TRUE.png', width = 15, height = 8)
View(RAS_de)
library(magrittr)
library(textshape)
library(ggplot2)
library(dplyr)
library(tidyr)
library(tictoc) # to assess performance of parallel processing
devtools::load_all()
# Load differential expression data (annotated with gene symbols)
de_string <- readRDS('data/de_string_v11.RDS')
# select HRAS condition as an example
RAS_de <- de_string$RAS
deg <- RAS_de
target <- 'HRAS'
# generate parameter grid
pipeline_vec <- c('centrality')
connected_filter <- c('TRUE', 'FALSE')
threshold_vec <- c(950)
logFC_vec <- seq(1.0, 2.0, 0.1)
Adj.P_vec <- seq(0.005, 0.05, 0.005)
# single example
# pipeline_vec <- c('centrality')
# connected_filter <- c('TRUE', 'FALSE')
# threshold_vec <- c(950)
# logFC_vec <- 2.0
# Adj.P_vec <- 0.05
parameter_grid <- expand.grid(pipeline = pipeline_vec,
connected_filter = connected_filter,
threshold=threshold_vec,
logFC=logFC_vec,
Adj.P=Adj.P_vec)
# run function for centrality
tic()
results <- parameter_grid(deg = RAS_de,
target = 'HRAS',
grid = parameter_grid,
n_cores = 4,
weighted = FALSE)
toc()
saveRDS(results, 'results/HRAS/parameter_grid_pvalue_logFC.RDS')
openxlsx::write.xlsx(results, 'results/HRAS/parameter_grid_pvalue_logFC.xlsx')
# explore results ---------------------------------------------------------
# best <- group_by(results, pipeline) %>% top_n(1, z_score)
#
#
# ggplot(results, aes(x = Adj.P, y = z_score, group = pipeline)) +
#     geom_line(aes(color = pipeline)) +
#     geom_point(size = 1.75) +
#     geom_point(data = best, color = 'red', size = 1.75) +
#     facet_grid(. ~logFC, scales = 'free') +
#     theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 1)) +
#     scale_color_manual(values = c('#F8766D', '#00BFC4'),
#                        labels = c("Centrality", "Propagation")) +
#     labs(title = 'Z-score vs p-value, by method pipeline',
#          x = 'Adjusted p-value threshold',
#          y = 'Z-score',
#          color = 'Pipeline')
# ggsave('results/parameter_grid_pvalue.png', width = 14, height = 5)
#
# ggplot(results %>% filter(pipeline == 'centrality'),
#        aes(x = Adj.P, y = z_score, group = pipeline)) +
#     geom_line(color = '#F8766D') +
#     geom_point(size = 1.75) +
#     geom_point(data = best %>% filter(pipeline == 'centrality'),
#                color = 'red', size = 1.75) +
#     facet_grid(. ~logFC, scales = 'free') +
#     theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 1)) +
#     labs(title = 'Z-score vs p-value, network centrality pipeline',
#          subtitle = 'Metric: betweenness',
#          x = 'Adjusted p-value threshold',
#          y = 'Z-score')
# ggsave('results/parameter_grid_pvalue_centrality.png', width = 15, height = 4)
#
# ggplot(results %>% filter(pipeline == 'propagation'),
#        aes(x = Adj.P, y = z_score, group = pipeline)) +
#     geom_line(color = '#00BFC4') +
#     geom_point(size = 1.75) +
#     geom_point(data = best %>% filter(pipeline == 'propagation'),
#                color = 'red', size = 1.75) +
#     facet_grid(. ~logFC, scales = 'free') +
#     theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 1)) +
#     labs(title = 'Z-score vs p-value, network propagation pipeline',
#          subtitle = 'Metric: diffusion (raw)',
#          x = 'Adjusted p-value threshold',
#          y = 'Z-score')
# ggsave('results/parameter_grid_pvalue_propagation.png', width = 15, height = 4)
# -------------------------------------------------------------------------
# with heatmap()
results_clip <- results %>% select(logFC, Adj.P, z_score)
results_mat <- results_clip %>%
# Convert long-form to wide-form
spread(key = logFC, value = z_score) %>%
column_to_rownames('Adj.P') %>%
as.matrix
heatmap(results_mat, Colv = NA, Rowv = NA, scale = "column")
# with ggplot
ggplot(results %>% filter(connected_filter == TRUE), aes(x = logFC, y = Adj.P)) +
geom_tile(aes(fill = z_score)) +
geom_text(aes(label = round(score_pval, 3))) +
scale_fill_continuous(low = 'white', high = '#0072B2') +
labs(title = 'Z-score vs. log fold-change and adjusted p-value, centrality pipeline',
subtitle = 'Metric: betweenness, connected_filter = TRUE',
x = 'Log Fold-Change',
y = 'Adjusted p-value',
fill = 'Z-score')
ggsave('results/HRAS/parameter_grid_pvalue_logFC_heatmap_TRUE.png', width = 15, height = 8)
library(magrittr)
library(textshape)
library(ggplot2)
library(dplyr)
library(tidyr)
library(tictoc) # to assess performance of parallel processing
devtools::load_all()
# Load differential expression data (annotated with gene symbols)
de_string <- readRDS('data/de_string_v11.RDS')
# select HRAS condition as an example
RAS_de <- de_string$RAS
deg <- RAS_de
target <- 'HRAS'
# generate parameter grid
pipeline_vec <- c('centrality')
connected_filter <- c('TRUE', 'FALSE')
threshold_vec <- c(950)
logFC_vec <- seq(1.0, 2.0, 0.1)
Adj.P_vec <- seq(0.005, 0.05, 0.005)
# single example
# pipeline_vec <- c('centrality')
# connected_filter <- c('TRUE', 'FALSE')
# threshold_vec <- c(950)
# logFC_vec <- 2.0
# Adj.P_vec <- 0.05
parameter_grid <- expand.grid(pipeline = pipeline_vec,
connected_filter = connected_filter,
threshold=threshold_vec,
logFC=logFC_vec,
Adj.P=Adj.P_vec)
# run function for centrality
tic()
results <- parameter_grid(deg = RAS_de,
target = 'HRAS',
grid = parameter_grid,
n_cores = 4,
weighted = FALSE)
toc()
saveRDS(results, 'results/HRAS/parameter_grid_pvalue_logFC.RDS')
openxlsx::write.xlsx(results, 'results/HRAS/parameter_grid_pvalue_logFC.xlsx')
# explore results ---------------------------------------------------------
# best <- group_by(results, pipeline) %>% top_n(1, z_score)
#
#
# ggplot(results, aes(x = Adj.P, y = z_score, group = pipeline)) +
#     geom_line(aes(color = pipeline)) +
#     geom_point(size = 1.75) +
#     geom_point(data = best, color = 'red', size = 1.75) +
#     facet_grid(. ~logFC, scales = 'free') +
#     theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 1)) +
#     scale_color_manual(values = c('#F8766D', '#00BFC4'),
#                        labels = c("Centrality", "Propagation")) +
#     labs(title = 'Z-score vs p-value, by method pipeline',
#          x = 'Adjusted p-value threshold',
#          y = 'Z-score',
#          color = 'Pipeline')
# ggsave('results/parameter_grid_pvalue.png', width = 14, height = 5)
#
# ggplot(results %>% filter(pipeline == 'centrality'),
#        aes(x = Adj.P, y = z_score, group = pipeline)) +
#     geom_line(color = '#F8766D') +
#     geom_point(size = 1.75) +
#     geom_point(data = best %>% filter(pipeline == 'centrality'),
#                color = 'red', size = 1.75) +
#     facet_grid(. ~logFC, scales = 'free') +
#     theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 1)) +
#     labs(title = 'Z-score vs p-value, network centrality pipeline',
#          subtitle = 'Metric: betweenness',
#          x = 'Adjusted p-value threshold',
#          y = 'Z-score')
# ggsave('results/parameter_grid_pvalue_centrality.png', width = 15, height = 4)
#
# ggplot(results %>% filter(pipeline == 'propagation'),
#        aes(x = Adj.P, y = z_score, group = pipeline)) +
#     geom_line(color = '#00BFC4') +
#     geom_point(size = 1.75) +
#     geom_point(data = best %>% filter(pipeline == 'propagation'),
#                color = 'red', size = 1.75) +
#     facet_grid(. ~logFC, scales = 'free') +
#     theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 1)) +
#     labs(title = 'Z-score vs p-value, network propagation pipeline',
#          subtitle = 'Metric: diffusion (raw)',
#          x = 'Adjusted p-value threshold',
#          y = 'Z-score')
# ggsave('results/parameter_grid_pvalue_propagation.png', width = 15, height = 4)
# -------------------------------------------------------------------------
# with heatmap()
results_clip <- results %>% select(logFC, Adj.P, z_score)
results_mat <- results_clip %>%
# Convert long-form to wide-form
spread(key = logFC, value = z_score) %>%
column_to_rownames('Adj.P') %>%
as.matrix
heatmap(results_mat, Colv = NA, Rowv = NA, scale = "column")
# with ggplot
ggplot(results %>% filter(connected_filter == TRUE), aes(x = logFC, y = Adj.P)) +
geom_tile(aes(fill = z_score)) +
geom_text(aes(label = round(score_pval, 3))) +
scale_fill_continuous(low = 'white', high = '#0072B2') +
labs(title = 'Z-score vs. log fold-change and adjusted p-value, centrality pipeline',
subtitle = 'Metric: betweenness, connected_filter = TRUE',
x = 'Log Fold-Change',
y = 'Adjusted p-value',
fill = 'Z-score')
ggsave('results/HRAS/parameter_grid_pvalue_logFC_heatmap_TRUE.png', width = 15, height = 8)
ggplot(results %>% filter(connected_filter == TRUE), aes(x = logFC, y = Adj.P)) +
geom_tile(aes(fill = z_score)) +
geom_text(aes(label = round(score_pval, 3))) +
scale_fill_continuous(low = 'white', high = '#0072B2') +
labs(title = 'Z-score vs. log fold-change and adjusted p-value, centrality pipeline',
subtitle = 'Metric: betweenness, connected_filter = TRUE',
x = 'Log Fold-Change',
y = 'Adjusted p-value',
fill = 'Z-score')
ggplot(results %>% filter(connected_filter == FALSE), aes(x = logFC, y = Adj.P)) +
geom_tile(aes(fill = z_score)) +
geom_text(aes(label = round(score_pval, 3))) +
scale_fill_continuous(low = 'white', high = '#0072B2') +
labs(title = 'Z-score vs. log fold-change and adjusted p-value, centrality pipeline',
subtitle = 'Metric: betweenness, connected_filter = FALSE',
x = 'Log Fold-Change',
y = 'Adjusted p-value',
fill = 'Z-score')
ggsave('results/HRAS/parameter_grid_pvalue_logFC_heatmap_FALSE.png', width = 15, height = 8)
library(magrittr)
library(textshape)
library(ggplot2)
library(dplyr)
library(tidyr)
myc_results <- readRDS('results/MYC/parameter_grid_pvalue_logFC.RDS')
ras_results <- readRDS('results/HRAS/parameter_grid_pvalue_logFC.RDS')
ggplot(myc_results, aes(x = logFC, y = mean_score, group=type)) +
facet_wrap(~type, scales = "free") +
geom_line(aes(color=type)) +
geom_line(aes(y = sample_mean, color='sample_mean')) +
geom_line(aes(y = sample_sd, color='sample_sd'))
ggplot(myc_results, aes(x = logFC, y = mean_score, group=connected_filter)) +
facet_wrap(~type, scales = "free") +
geom_line(aes(color=connected_filter)) +
geom_line(aes(y = sample_mean, color='sample_mean')) +
geom_line(aes(y = sample_sd, color='sample_sd'))
ggplot(myc_results, aes(x = logFC, y = mean_score, group=connected_filter)) +
facet_wrap(~connected_filter, scales = "free") +
geom_line(aes(color=connected_filter)) +
geom_line(aes(y = sample_mean, color='sample_mean')) +
geom_line(aes(y = sample_sd, color='sample_sd'))
ggplot(ras_results, aes(x = logFC, y = mean_score, group=connected_filter)) +
facet_wrap(~connected_filter, scales = "free") +
geom_line(aes(color=connected_filter)) +
geom_line(aes(y = sample_mean, color='sample_mean')) +
geom_line(aes(y = sample_sd, color='sample_sd'))
View(myc_results)
ggplot(myc_results, aes(x = Adj.P, y = mean_score, group=connected_filter)) +
facet_wrap(~connected_filter, scales = "free") +
geom_line(aes(color=connected_filter)) +
geom_line(aes(y = sample_mean, color='sample_mean')) +
geom_line(aes(y = sample_sd, color='sample_sd'))
ggplot(ras_results, aes(x = Adj.P, y = mean_score, group=connected_filter)) +
facet_wrap(~connected_filter, scales = "free") +
geom_line(aes(color=connected_filter)) +
geom_line(aes(y = sample_mean, color='sample_mean')) +
geom_line(aes(y = sample_sd, color='sample_sd'))
ggplot(myc_results, aes(x = target_neighbors_in_final, y = mean_score, group=connected_filter)) +
facet_wrap(~connected_filter, scales = "free") +
geom_line(aes(color=connected_filter)) +
geom_line(aes(y = sample_mean, color='sample_mean')) +
geom_line(aes(y = sample_sd, color='sample_sd'))
ggplot(ras_results, aes(x = target_neighbors_in_final, y = mean_score, group=connected_filter)) +
facet_wrap(~connected_filter, scales = "free") +
geom_line(aes(color=connected_filter)) +
geom_line(aes(y = sample_mean, color='sample_mean')) +
geom_line(aes(y = sample_sd, color='sample_sd'))
ggplot(myc_results, aes(x = target_neighbors_in_final, y = z_score, group=connected_filter)) +
facet_wrap(~connected_filter, scales = "free") +
geom_line(aes(color=connected_filter)) +
geom_line(aes(y = sample_mean, color='sample_mean')) +
geom_line(aes(y = sample_sd, color='sample_sd'))
ggplot(myc_results, aes(x = logFC, y = z_score, group=connected_filter)) +
facet_wrap(~connected_filter, scales = "free") +
geom_line(aes(color=connected_filter)) +
geom_line(aes(y = sample_mean, color='sample_mean')) +
geom_line(aes(y = sample_sd, color='sample_sd'))
ggplot(ras_results, aes(x = logFC, y = z_score, group=connected_filter)) +
facet_wrap(~connected_filter, scales = "free") +
geom_line(aes(color=connected_filter)) +
geom_line(aes(y = sample_mean, color='sample_mean')) +
geom_line(aes(y = sample_sd, color='sample_sd'))
count(myc_results, logFC, Adj.P, connected_filter)
check()
library(devtools)
check()
check(vignettes = FALSE)
library(devtools)
check(vignettes = FALSE)

label = 'Minimum log2 fold change',
min = 0, max = 3,
value = 1.5, step = 0.1),
sliderInput(inputId = 'pvalue', label = 'Maximum p-value',
min = 0, max = 0.25,
value = 0.05, step = 0.01),
selectInput(inputId = 'connected',
label = 'Return connected component',
choices = c("TRUE"=1,"FALSE"=0)),
selectInput(inputId = 'weighted',
label = 'Return weighted score',
choices = c("TRUE"=1,"FALSE"=0)),
actionButton(inputId = "build",
label = 'Rank nodes')
)
,
mainPanel(
width = 9,
navbarPage(tabPanel('Network Plot',plotOutput('nodePlot')),
tabPanel('Method Performance',DT::dataTableOutput('targetPerformance')),
tabPanel('Ranked Genes',DT::dataTableOutput('topGenes'))
)
)
)
)
# Define server logic
server <- function(input, output) {
observeEvent(input$build, {
# read input file
file <- input$dge_data
ext <- tools::file_ext(file$datapath)
req(file)
validate(need(ext == "xlsx", "Please upload an xlsx file"))
data <- openxlsx::read.xlsx(file$datapath)
# generate results
results <- noderank::centrality_pipeline(
# deg = myc_de,
deg = data,
edge_conf_score_min = 950,
logFC_min = as.numeric(input$logFC),
pvalue_max = as.numeric(input$pvalue),
method = input$method,
causal_gene_symbol = input$target,
export_network = FALSE,
sim_method = 'jaccard',
n_sim = 9999,
weighted = as.logical(as.numeric(input$weighted)),
connected_filter = as.logical(as.numeric(input$connected)))
output$nodePlot <- renderPlot({
plot_graph(results[['network']],
method = 'weighted_score',
gene_list = c(input$target))
})
performance_display <- results[['performance']] %>%
.[,c('rank', 'mean_score', 'score_pval', 'z_score', 'sample_mean', 'sample_sd')] %>%
stats::setNames(c('Gene Rank', 'Mean Network Score', 'Network P Value',
'Z Score', 'Null Mean Score', 'Null Standard Deviation'))
performanceNames <- c(names(performance_display))[-1]
# performanceNames <- c(names(results[['performance']])[-6])
output$targetPerformance <- DT::renderDataTable({datatable(performance_display) %>%
formatRound(performanceNames, 3)})
# output$targetPerformance <- DT::renderDataTable({datatable(results[['performance']]) %>%
#         formatRound(performanceNames, 3)})
top_genes_display <- results[['top_genes']] %>%
.[,c('Symbol', 'logFC', 'AveExpr', 'P.Value', 'adj.P.Val', input$method, 'causal_similarity', 'weighted_score')] %>%
stats::setNames(c('Symbol', 'Log Fold Change', 'Average Expression',
'P Value', 'Adj. P Value', paste(tools::toTitleCase(input$method),' Score'),
'Causal Similarity', 'Weighted Score'))
topGnames <- c(names(top_genes_display)[-1])
# topGnames <- c(names(results[['top_genes']])[-1:-3])
output$topGenes <- DT::renderDataTable({datatable(top_genes_display) %>%
formatRound(topGnames, 3)})
# output$topGenes <- DT::renderDataTable({datatable(results[['top_genes']]) %>%
#         formatRound(topGnames, 3)})
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(shinythemes)
library(DT)
devtools::load_all()
# save the deg results as an excel file
de_string <- readRDS('data/de_string_v11.RDS')
myc_de <- de_string$MYC
openxlsx::write.xlsx(myc_de, 'data/de_string_v11_MYC.xlsx')
# Define UI for application
ui <- fluidPage(
theme = shinytheme("flatly"),
titlePanel(h2("noderank", align = 'left'),
h4("A node prioritization tool for differential gene expression analysis", align = 'left')),
# Sidebar
sidebarLayout(
sidebarPanel(width = 3,
fileInput(inputId = 'dge_data',
label = 'Upload differential gene expression analysis results',
multiple = TRUE,
accept = c('.xlsx')),
textInput(inputId = 'target',
label = 'Causal gene'),
selectInput(inputId = 'method',
label = 'Centrality method',
choices = c('avg_strength', 'betweenness', 'degree',
'evcent_uw', 'evcent_w', 'strength')),
sliderInput(inputId = 'logFC',
label = 'Minimum log2 fold change',
min = 0, max = 3,
value = 1.5, step = 0.1),
sliderInput(inputId = 'pvalue', label = 'Maximum p-value',
min = 0, max = 0.25,
value = 0.05, step = 0.01),
selectInput(inputId = 'connected',
label = 'Return connected component',
choices = c("TRUE"=1,"FALSE"=0)),
selectInput(inputId = 'weighted',
label = 'Return weighted score',
choices = c("TRUE"=1,"FALSE"=0)),
actionButton(inputId = "build",
label = 'Rank nodes')
)
,
mainPanel(
width = 9,
navbarPage(title = '',
tabPanel('Network Plot',plotOutput('nodePlot')),
tabPanel('Method Performance',DT::dataTableOutput('targetPerformance')),
tabPanel('Ranked Genes',DT::dataTableOutput('topGenes'))
)
)
)
)
# Define server logic
server <- function(input, output) {
observeEvent(input$build, {
# read input file
file <- input$dge_data
ext <- tools::file_ext(file$datapath)
req(file)
validate(need(ext == "xlsx", "Please upload an xlsx file"))
data <- openxlsx::read.xlsx(file$datapath)
# generate results
results <- noderank::centrality_pipeline(
# deg = myc_de,
deg = data,
edge_conf_score_min = 950,
logFC_min = as.numeric(input$logFC),
pvalue_max = as.numeric(input$pvalue),
method = input$method,
causal_gene_symbol = input$target,
export_network = FALSE,
sim_method = 'jaccard',
n_sim = 9999,
weighted = as.logical(as.numeric(input$weighted)),
connected_filter = as.logical(as.numeric(input$connected)))
output$nodePlot <- renderPlot({
plot_graph(results[['network']],
method = 'weighted_score',
gene_list = c(input$target))
})
performance_display <- results[['performance']] %>%
.[,c('rank', 'mean_score', 'score_pval', 'z_score', 'sample_mean', 'sample_sd')] %>%
stats::setNames(c('Gene Rank', 'Mean Network Score', 'Network P Value',
'Z Score', 'Null Mean Score', 'Null Standard Deviation'))
performanceNames <- c(names(performance_display))[-1]
# performanceNames <- c(names(results[['performance']])[-6])
output$targetPerformance <- DT::renderDataTable({datatable(performance_display) %>%
formatRound(performanceNames, 3)})
# output$targetPerformance <- DT::renderDataTable({datatable(results[['performance']]) %>%
#         formatRound(performanceNames, 3)})
top_genes_display <- results[['top_genes']] %>%
.[,c('Symbol', 'logFC', 'AveExpr', 'P.Value', 'adj.P.Val', input$method, 'causal_similarity', 'weighted_score')] %>%
stats::setNames(c('Symbol', 'Log Fold Change', 'Average Expression',
'P Value', 'Adj. P Value', paste(tools::toTitleCase(input$method),' Score'),
'Causal Similarity', 'Weighted Score'))
topGnames <- c(names(top_genes_display)[-1])
# topGnames <- c(names(results[['top_genes']])[-1:-3])
output$topGenes <- DT::renderDataTable({datatable(top_genes_display) %>%
formatRound(topGnames, 3)})
# output$topGenes <- DT::renderDataTable({datatable(results[['top_genes']]) %>%
#         formatRound(topGnames, 3)})
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(shinythemes)
library(DT)
devtools::load_all()
# save the deg results as an excel file
de_string <- readRDS('data/de_string_v11.RDS')
myc_de <- de_string$MYC
openxlsx::write.xlsx(myc_de, 'data/de_string_v11_MYC.xlsx')
# Define UI for application
ui <- fluidPage(
theme = shinytheme("flatly"),
titlePanel(h2("noderank\nA node prioritization tool for differential gene expression analysis", align = 'left')),
)
library(shiny)
library(shinythemes)
library(DT)
devtools::load_all()
# save the deg results as an excel file
de_string <- readRDS('data/de_string_v11.RDS')
myc_de <- de_string$MYC
openxlsx::write.xlsx(myc_de, 'data/de_string_v11_MYC.xlsx')
# Define UI for application
ui <- fluidPage(
theme = shinytheme("flatly"),
titlePanel(h2("noderank\nA node prioritization tool for differential gene expression analysis", align = 'left')),
# Sidebar
sidebarLayout(
sidebarPanel(width = 3,
fileInput(inputId = 'dge_data',
label = 'Upload differential gene expression analysis results',
multiple = TRUE,
accept = c('.xlsx')),
textInput(inputId = 'target',
label = 'Causal gene'),
selectInput(inputId = 'method',
label = 'Centrality method',
choices = c('avg_strength', 'betweenness', 'degree',
'evcent_uw', 'evcent_w', 'strength')),
sliderInput(inputId = 'logFC',
label = 'Minimum log2 fold change',
min = 0, max = 3,
value = 1.5, step = 0.1),
sliderInput(inputId = 'pvalue', label = 'Maximum p-value',
min = 0, max = 0.25,
value = 0.05, step = 0.01),
selectInput(inputId = 'connected',
label = 'Return connected component',
choices = c("TRUE"=1,"FALSE"=0)),
selectInput(inputId = 'weighted',
label = 'Return weighted score',
choices = c("TRUE"=1,"FALSE"=0)),
actionButton(inputId = "build",
label = 'Rank nodes')
)
,
mainPanel(
width = 9,
navbarPage(title = '',
tabPanel('Network Plot',plotOutput('nodePlot')),
tabPanel('Method Performance',DT::dataTableOutput('targetPerformance')),
tabPanel('Ranked Genes',DT::dataTableOutput('topGenes'))
)
)
)
)
# Define server logic
server <- function(input, output) {
observeEvent(input$build, {
# read input file
file <- input$dge_data
ext <- tools::file_ext(file$datapath)
req(file)
validate(need(ext == "xlsx", "Please upload an xlsx file"))
data <- openxlsx::read.xlsx(file$datapath)
# generate results
results <- noderank::centrality_pipeline(
# deg = myc_de,
deg = data,
edge_conf_score_min = 950,
logFC_min = as.numeric(input$logFC),
pvalue_max = as.numeric(input$pvalue),
method = input$method,
causal_gene_symbol = input$target,
export_network = FALSE,
sim_method = 'jaccard',
n_sim = 9999,
weighted = as.logical(as.numeric(input$weighted)),
connected_filter = as.logical(as.numeric(input$connected)))
output$nodePlot <- renderPlot({
plot_graph(results[['network']],
method = 'weighted_score',
gene_list = c(input$target))
})
performance_display <- results[['performance']] %>%
.[,c('rank', 'mean_score', 'score_pval', 'z_score', 'sample_mean', 'sample_sd')] %>%
stats::setNames(c('Gene Rank', 'Mean Network Score', 'Network p-value',
'Z Score', 'Null Mean Score', 'Null Standard Deviation'))
performanceNames <- c(names(performance_display))[-1]
# performanceNames <- c(names(results[['performance']])[-6])
output$targetPerformance <- DT::renderDataTable({datatable(performance_display) %>%
formatRound(performanceNames, 3)})
# output$targetPerformance <- DT::renderDataTable({datatable(results[['performance']]) %>%
#         formatRound(performanceNames, 3)})
top_genes_display <- results[['top_genes']] %>%
.[,c('Symbol', 'logFC', 'AveExpr', 'P.Value', 'adj.P.Val', input$method, 'causal_similarity', 'weighted_score')] %>%
stats::setNames(c('Symbol', 'Log Fold Change', 'Average Expression',
'p-value', 'Adj. p-value', paste(tools::toTitleCase(input$method),' Score'),
'Causal Similarity', 'Weighted Score'))
topGnames <- c(names(top_genes_display)[-1])
# topGnames <- c(names(results[['top_genes']])[-1:-3])
output$topGenes <- DT::renderDataTable({datatable(top_genes_display) %>%
formatRound(topGnames, 3)})
# output$topGenes <- DT::renderDataTable({datatable(results[['top_genes']]) %>%
#         formatRound(topGnames, 3)})
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(shinythemes)
library(DT)
devtools::load_all()
# save the deg results as an excel file
de_string <- readRDS('data/de_string_v11.RDS')
myc_de <- de_string$MYC
openxlsx::write.xlsx(myc_de, 'data/de_string_v11_MYC.xlsx')
# Define UI for application
ui <- fluidPage(
theme = shinytheme("flatly"),
titlePanel(h2("noderank\nA node prioritization tool for differential gene expression analysis", align = 'left')),
# Sidebar
sidebarLayout(
sidebarPanel(width = 3,
fileInput(inputId = 'dge_data',
label = 'Upload differential gene expression analysis results',
multiple = TRUE,
accept = c('.xlsx')),
textInput(inputId = 'target',
label = 'Causal gene'),
selectInput(inputId = 'method',
label = 'Centrality method',
choices = c('avg_strength', 'betweenness', 'degree',
'evcent_uw', 'evcent_w', 'strength')),
sliderInput(inputId = 'logFC',
label = 'Minimum log2 fold change',
min = 0, max = 3,
value = 1.5, step = 0.1),
sliderInput(inputId = 'pvalue', label = 'Maximum p-value',
min = 0, max = 0.25,
value = 0.05, step = 0.01),
selectInput(inputId = 'connected',
label = 'Return connected component',
choices = c("TRUE"=1,"FALSE"=0)),
selectInput(inputId = 'weighted',
label = 'Return weighted score',
choices = c("TRUE"=1,"FALSE"=0)),
actionButton(inputId = "build",
label = 'Rank nodes')
)
,
mainPanel(
width = 9,
navbarPage(title = '',
tabPanel('Network Plot',plotOutput('nodePlot')),
tabPanel('Method Performance',DT::dataTableOutput('targetPerformance')),
tabPanel('Ranked Genes',DT::dataTableOutput('topGenes'))
)
)
)
)
# Define server logic
server <- function(input, output) {
observeEvent(input$build, {
# read input file
file <- input$dge_data
ext <- tools::file_ext(file$datapath)
req(file)
validate(need(ext == "xlsx", "Please upload an xlsx file"))
data <- openxlsx::read.xlsx(file$datapath)
# generate results
results <- noderank::centrality_pipeline(
# deg = myc_de,
deg = data,
edge_conf_score_min = 950,
logFC_min = as.numeric(input$logFC),
pvalue_max = as.numeric(input$pvalue),
method = input$method,
causal_gene_symbol = input$target,
export_network = FALSE,
sim_method = 'jaccard',
n_sim = 9999,
weighted = as.logical(as.numeric(input$weighted)),
connected_filter = as.logical(as.numeric(input$connected)))
output$nodePlot <- renderPlot({
plot_graph(results[['network']],
method = 'weighted_score',
gene_list = c(input$target))
})
performance_display <- results[['performance']] %>%
.[,c('rank', 'mean_score', 'score_pval', 'z_score', 'sample_mean', 'sample_sd')] %>%
stats::setNames(c('Gene Rank', 'Mean Network Score', 'Network p-value',
'Z Score', 'Null Mean Score', 'Null Standard Deviation'))
performanceNames <- c(names(performance_display))[-1]
# performanceNames <- c(names(results[['performance']])[-6])
output$targetPerformance <- DT::renderDataTable({datatable(performance_display) %>%
formatRound(performanceNames, 3)})
# output$targetPerformance <- DT::renderDataTable({datatable(results[['performance']]) %>%
#         formatRound(performanceNames, 3)})
top_genes_display <- results[['top_genes']] %>%
.[,c('Symbol', 'logFC', 'AveExpr', 'P.Value', 'adj.P.Val', input$method, 'causal_similarity', 'weighted_score')] %>%
stats::setNames(c('Symbol', 'Log Fold Change', 'Average Expression',
'p-value', 'Adj. p-value', paste(tools::toTitleCase(input$method),' Score'),
'Causal Similarity', 'Weighted Score'))
topGnames <- c(names(top_genes_display)[-1])
# topGnames <- c(names(results[['top_genes']])[-1:-3])
output$topGenes <- DT::renderDataTable({datatable(top_genes_display) %>%
formatRound(topGnames, 3)})
# output$topGenes <- DT::renderDataTable({datatable(results[['top_genes']]) %>%
#         formatRound(topGnames, 3)})
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(shinythemes)
library(DT)
devtools::load_all()
# save the deg results as an excel file
de_string <- readRDS('data/de_string_v11.RDS')
myc_de <- de_string$MYC
openxlsx::write.xlsx(myc_de, 'data/de_string_v11_MYC.xlsx')
# Define UI for application
ui <- fluidPage(
theme = shinytheme("flatly"),
titlePanel(h2("noderank\nA node prioritization tool for differential gene expression analysis", align = 'left')),
# Sidebar
sidebarLayout(
sidebarPanel(width = 3,
fileInput(inputId = 'dge_data',
label = 'Upload differential gene expression analysis results',
multiple = TRUE,
accept = c('.xlsx')),
textInput(inputId = 'target',
label = 'Causal gene'),
selectInput(inputId = 'method',
label = 'Centrality method',
choices = c('avg_strength', 'betweenness', 'degree',
'evcent_uw', 'evcent_w', 'strength')),
sliderInput(inputId = 'logFC',
label = 'Minimum log2 fold change',
min = 0, max = 3,
value = 1.5, step = 0.1),
sliderInput(inputId = 'pvalue', label = 'Maximum p-value',
min = 0, max = 0.25,
value = 0.05, step = 0.01),
selectInput(inputId = 'connected',
label = 'Return connected component',
choices = c("TRUE"=1,"FALSE"=0)),
selectInput(inputId = 'weighted',
label = 'Return weighted score',
choices = c("TRUE"=1,"FALSE"=0)),
actionButton(inputId = "build",
label = 'Rank nodes')
)
,
mainPanel(
width = 9,
navbarPage(title = '',
tabPanel('Network Plot',plotOutput('nodePlot')),
tabPanel('Method Performance',DT::dataTableOutput('targetPerformance')),
tabPanel('Ranked Genes',DT::dataTableOutput('topGenes'))
)
)
)
)
# Define server logic
server <- function(input, output) {
observeEvent(input$build, {
# read input file
file <- input$dge_data
ext <- tools::file_ext(file$datapath)
req(file)
validate(need(ext == "xlsx", "Please upload an xlsx file"))
data <- openxlsx::read.xlsx(file$datapath)
# generate results
results <- noderank::centrality_pipeline(
# deg = myc_de,
deg = data,
edge_conf_score_min = 950,
logFC_min = as.numeric(input$logFC),
pvalue_max = as.numeric(input$pvalue),
method = input$method,
causal_gene_symbol = input$target,
export_network = FALSE,
sim_method = 'jaccard',
n_sim = 9999,
weighted = as.logical(as.numeric(input$weighted)),
connected_filter = as.logical(as.numeric(input$connected)))
output$nodePlot <- renderPlot({
plot_graph(results[['network']],
method = 'weighted_score',
gene_list = c(input$target))
})
performance_display <- results[['performance']] %>%
.[,c('rank', 'mean_score', 'score_pval', 'z_score', 'sample_mean', 'sample_sd')] %>%
stats::setNames(c('Gene Rank', 'Mean Network Score', 'Network p-value',
'Z Score', 'Null Mean Score', 'Null Standard Deviation'))
performanceNames <- c(names(performance_display))[-1]
# performanceNames <- c(names(results[['performance']])[-6])
output$targetPerformance <- DT::renderDataTable({datatable(performance_display) %>%
formatRound(performanceNames, 3)})
# output$targetPerformance <- DT::renderDataTable({datatable(results[['performance']]) %>%
#         formatRound(performanceNames, 3)})
top_genes_display <- results[['top_genes']] %>%
.[,c('Symbol', 'logFC', 'AveExpr', 'P.Value', 'adj.P.Val', input$method, 'causal_similarity', 'weighted_score')] %>%
stats::setNames(c('Symbol', 'Log Fold Change', 'Average Expression',
'p-value', 'Adj. p-value', paste(tools::toTitleCase(input$method),' Score'),
'Causal Similarity', 'Weighted Score'))
topGnames <- c(names(top_genes_display)[-1])
# topGnames <- c(names(results[['top_genes']])[-1:-3])
output$topGenes <- DT::renderDataTable({datatable(top_genes_display) %>%
formatRound(topGnames, 3)})
# output$topGenes <- DT::renderDataTable({datatable(results[['top_genes']]) %>%
#         formatRound(topGnames, 3)})
})
}
# Run the application
shinyApp(ui = ui, server = server)

<<<<<<< Updated upstream
score_pval <- sum(sample_means > mean_pred_score) / n_sim
# results
network <- ppi_painted_filt_giant
ggn <- ggnetwork(network)
plot1 <- ggplot(ggn, aes(x = x, y = y, xend = xend, yend = yend)) +
geom_edges(alpha = 0.7) +
geom_nodes(aes(color = logFC, size = betweenness), alpha = 0.65) +
geom_nodetext_repel(aes(label = Symbol)) +
geom_nodelabel_repel(data=subset(ggn, Symbol == 'MYC'), aes(label=Symbol)) +
scale_color_gradient(low = 'blue', high = 'red') +
scale_size_continuous(range = c(5, 25)) +
theme_blank()
?centrality_pipeline
library(ggplot2)
library(ggnetwork)
library(knitr)
library(kableExtra)
devtools::load_all('..')
set.seed(4)
results <- centrality_pipeline(deg = myc_de,
edge_conf_score_min = 950,
logFC_min = 1.5,
pvalue_max = 0.05,
method = 'betweenness',
causal_gene_symbol = 'MYC',
export_network = FALSE,
n_sim = 9999)
results <- centrality_pipeline(deg = myc_de,
edge_conf_score_min = 950,
logFC_min = 1.5,
pvalue_max = 0.05,
method = 'betweenness',
causal_gene_symbol = 'MYC',
export_network = FALSE,
n_sim = 9999)
load_all()
devtools::load_all()
results <- centrality_pipeline(deg = myc_de,
edge_conf_score_min = 950,
logFC_min = 1.5,
pvalue_max = 0.05,
method = 'betweenness',
causal_gene_symbol = 'MYC',
export_network = FALSE,
n_sim = 9999)
check()
devtools::check()
devtools::build()
names(results)
# results
network <- results$network
ggn <- ggnetwork(network)
plot2 <- ggplot(ggn, aes(x = x, y = y, xend = xend, yend = yend)) +
geom_edges(alpha = 0.7) +
geom_nodes(aes(color = logFC, size = betweenness), alpha = 0.65) +
geom_nodetext_repel(aes(label = Symbol)) +
geom_nodelabel_repel(data=subset(ggn, Symbol == 'MYC'), aes(label=Symbol)) +
scale_color_gradient(low = 'blue', high = 'red') +
scale_size_continuous(range = c(5, 25)) +
theme_blank()
ggsave(plot = plot2, filename = 'figure2.png', width = 15, height = 15)
knitr::include_graphics('figure2.png')
knitr::kable(head(results$top_genes)) %>%
kableExtra::kable_styling(latex_options="scale_down")
knitr::kable(head(results$top_genes)) %>%
kableExtra::kable_styling(latex_options="scale_down")
d <- data.frame(mean_score = results$mean_score,
pvalue = results$pvalue)
knitr::kable(d)
knitr::kable(head(results$top_genes)) %>%
kableExtra::kable_styling(latex_options="scale_down")
devtools::build()
library(devtools)
build_vignettes()
check()
.Last.error.trace
build_vignettes()
check()
build()
# load relevant packages
library(STRINGdb)
library(ggnetwork)
=======
#     geom_point(data = best, color = 'red', size = 1.75) +
#     facet_grid(. ~logFC, scales = 'free') +
#     theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 1)) +
#     scale_color_manual(values = c('#F8766D', '#00BFC4'),
#                        labels = c("Centrality", "Propagation")) +
#     labs(title = 'Z-score vs p-value, by method pipeline',
#          x = 'Adjusted p-value threshold',
#          y = 'Z-score',
#          color = 'Pipeline')
# ggsave('results/parameter_grid_pvalue.png', width = 14, height = 5)
#
# ggplot(results %>% filter(pipeline == 'centrality'),
#        aes(x = Adj.P, y = z_score, group = pipeline)) +
#     geom_line(color = '#F8766D') +
#     geom_point(size = 1.75) +
#     geom_point(data = best %>% filter(pipeline == 'centrality'),
#                color = 'red', size = 1.75) +
#     facet_grid(. ~logFC, scales = 'free') +
#     theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 1)) +
#     labs(title = 'Z-score vs p-value, network centrality pipeline',
#          subtitle = 'Metric: betweenness',
#          x = 'Adjusted p-value threshold',
#          y = 'Z-score')
# ggsave('results/parameter_grid_pvalue_centrality.png', width = 15, height = 4)
#
# ggplot(results %>% filter(pipeline == 'propagation'),
#        aes(x = Adj.P, y = z_score, group = pipeline)) +
#     geom_line(color = '#00BFC4') +
#     geom_point(size = 1.75) +
#     geom_point(data = best %>% filter(pipeline == 'propagation'),
#                color = 'red', size = 1.75) +
#     facet_grid(. ~logFC, scales = 'free') +
#     theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 1)) +
#     labs(title = 'Z-score vs p-value, network propagation pipeline',
#          subtitle = 'Metric: diffusion (raw)',
#          x = 'Adjusted p-value threshold',
#          y = 'Z-score')
# ggsave('results/parameter_grid_pvalue_propagation.png', width = 15, height = 4)
# -------------------------------------------------------------------------
# with heatmap()
results_clip <- results %>% select(logFC, Adj.P, z_score)
results_mat <- results_clip %>%
# Convert long-form to wide-form
spread(key = logFC, value = z_score) %>%
column_to_rownames('Adj.P') %>%
as.matrix
heatmap(results_mat, Colv = NA, Rowv = NA, scale = "column")
# with ggplot
ggplot(results %>% filter(connected_filter == TRUE), aes(x = logFC, y = Adj.P)) +
geom_tile(aes(fill = z_score)) +
geom_text(aes(label = round(score_pval, 3))) +
scale_fill_continuous(low = 'white', high = '#0072B2') +
labs(title = 'Z-score vs. log fold-change and adjusted p-value, centrality pipeline',
subtitle = 'Metric: betweenness, connected_filter = TRUE',
x = 'Log Fold-Change',
y = 'Adjusted p-value',
fill = 'Z-score')
ggsave('results/HRAS/parameter_grid_pvalue_logFC_heatmap_TRUE.png', width = 15, height = 8)
library(magrittr)
library(textshape)
>>>>>>> Stashed changes
library(ggplot2)
library(igraph)
library(dplyr)
library(glue)
# load all package functions
devtools::load_all()
# read differential expression data (annotated with gene symbols)
de_string <- readRDS('data/de_string.RDS')
# select MYC condition as an example
myc_de <- de_string$MYC
# define globals
deg <- myc_de
edge_conf_score_min <- 950
logFC_min <- 1.5
pvalue_max <- 0.05
causal_gene_symbol <- 'MYC'
method <- 'raw'
final_results <- c()
export_network <- FALSE
n_sim <- 9999
# network generation ------------------------------------------------------
# generate protein association network
string_db <- STRINGdb::STRINGdb$new(version="11",
species=9606,
score_threshold=edge_conf_score_min)
ppi <- string_db$get_graph()
# map DEA results onto ppi network
ppi_painted <- df_to_vert_attr(graph=ppi, df=deg, common="STRING_id",
attr_name = c("Symbol", "ID", "logFC", "AveExpr",
"t", "P.Value", "adj.P.Val", "B"))
# seed the graph based on the fold-change and pvalue thresholds
ppi_painted_filt <- attribute_seed(ppi_painted,
abs(logFC) > log2(logFC_min) & adj.P.Val < pvalue_max)
# select the connected subgraph
ppi_painted_filt_giant <- connected_subgraph(ppi_painted_filt)
# simulate diffusion
scores <- as_data_frame(vertex_attr(ppi_painted_filt_giant))$seed
names(scores) <- as_data_frame(vertex_attr(ppi_painted_filt_giant))$name
diffusion_scores <- diffuStats::diffuse(graph = ppi_painted_filt_giant,
scores = scores,
method = method)
diffusion_scores
length(diffusion_scores)
length(V(ppi_painted_filt_giant))
final_network <- igraph::set_vertex_attr(ppi_painted_filt_giant,
name = method,
value = diffusion_scores)
ppi_painted_filt_giant <- igraph::set_vertex_attr(ppi_painted_filt_giant,
name = method,
value = diffusion_scores)
ppi_painted_filt_giant <- igraph::set_vertex_attr(ppi_painted_filt_giant,
name = 'score',
value = diffusion_scores)
range(diffusion_scores)
hist(diffusion_scores)
hist(diffusion_scores, xlim = c(0.1, 0.7))
hist(diffusion_scores, xlim = c(0.3, 0.7))
hist(diffusion_scores, xlim = c(0.3, 0.7), ylim = c(0, 1000))
hist(diffusion_scores, xlim = c(0.3, 0.7), ylim = c(0, 300))
hist(diffusion_scores, xlim = c(0.3, 0.7), ylim = c(0, 50))
hist(diffusion_scores, xlim = c(0.25, 0.7), ylim = c(0, 50))
hist(diffusion_scores, xlim = c(0.2, 0.7), ylim = c(0, 50))
sum(diffusion_scores > 0.2)
# new
min_diff_score <- 0.2
ppi_painted_filt_giant <- igraph::set_vertex_attr(ppi_painted_filt_giant,
name = 'diffusion_score',
value = diffusion_scores)
# filter network to only include scores
final_network <- attribute_filter(ppi_painted_filt_giant,
diffusion_score > min_diff_score)
length(V(final_network))
View(as_data_frame(vertex_attr(V)))
View(igraph::as_data_frame(vertex_attr(V)))
View(igraph::as_data_frame(vertex_attr(final_network)))
vertex_attr(final_network))
vertex_attr(final_network)
igraph::as_data_frame(final_network) %>%View
igraph::as_data_frame(final_network, what = 'nodes') %>%View
igraph::as_data_frame(final_network, what = 'vertices') %>%View
# select the connected subgraph
ppi_painted_filt_giant <- connected_subgraph(ppi_painted_filt)
# simulate diffusion
scores <- as_data_frame(vertex_attr(ppi_painted_filt_giant))$seed
names(scores) <- as_data_frame(vertex_attr(ppi_painted_filt_giant))$name
diffusion_scores <- diffuStats::diffuse(graph = ppi_painted_filt_giant,
scores = scores,
method = method)
igraph::as_data_frame(ppi_painted_filt_giant, what = 'vertices') %>%View
ppi_painted_filt_giant <- igraph::set_vertex_attr(ppi_painted_filt_giant,
name = 'diffusion_score',
value = diffusion_scores)
# filter network to only include scores
final_network <- attribute_filter(ppi_painted_filt_giant,
diffusion_score > min_diff_score)
igraph::as_data_frame(final_network, what = 'vertices') %>%View
plot(final_network)
View(deg)
# load relevant packages
library(STRINGdb)
library(ggnetwork)
library(ggplot2)
library(igraph)
library(dplyr)
library(glue)
# load all package functions
devtools::load_all()
# read differential expression data (annotated with gene symbols)
de_string <- readRDS('data/de_string.RDS')
# select MYC condition as an example
myc_de <- de_string$MYC
# define globals
deg <- myc_de
edge_conf_score_min <- 950
logFC_min <- 1.5
pvalue_max <- 0.05
causal_gene_symbol <- 'MYC'
method <- 'raw'
final_results <- c()
export_network <- FALSE
n_sim <- 9999
# new
min_diff_score <- 0.2
grid <- FALSE
# network generation ------------------------------------------------------
# generate protein association network
string_db <- STRINGdb::STRINGdb$new(version="11",
species=9606,
score_threshold=edge_conf_score_min)
ppi <- string_db$get_graph()
# filter to only include genes that are also in the DEG results - check this
ppi2 <- attribute_filter(ppi, name %in% deg$STRING_id)
length(V(ppi))
length(V(ppi2))
# map DEA results onto ppi network
ppi_painted <- df_to_vert_attr(graph=ppi, df=deg, common="STRING_id",
attr_name = c("Symbol", "ID", "logFC", "AveExpr",
"t", "P.Value", "adj.P.Val", "B"))
# seed the graph based on the fold-change and pvalue thresholds
ppi_painted_filt <- attribute_seed(ppi_painted,
abs(logFC) > log2(logFC_min) & adj.P.Val < pvalue_max)
# select the connected subgraph
ppi_painted_filt_giant <- connected_subgraph(ppi_painted_filt)
# simulate diffusion
scores <- as_data_frame(vertex_attr(ppi_painted_filt_giant))$seed
names(scores) <- as_data_frame(vertex_attr(ppi_painted_filt_giant))$name
diffusion_scores <- diffuStats::diffuse(graph = ppi_painted_filt_giant,
scores = scores,
method = method)
ppi_painted_filt_giant <- igraph::set_vertex_attr(ppi_painted_filt_giant,
name = 'diffusion_score',
value = diffusion_scores)
# filter network to only include scores
final_network <- attribute_filter(ppi_painted_filt_giant,
diffusion_score > min_diff_score)
length(V(final_network))
# new
min_diff_score <- 0.5
# filter network to only include scores
final_network <- attribute_filter(ppi_painted_filt_giant,
diffusion_score > min_diff_score)
length(V(final_network))
# new
min_diff_score <- 0.1
# filter network to only include scores
final_network <- attribute_filter(ppi_painted_filt_giant,
diffusion_score > min_diff_score)
length(V(final_network))
plot(final_network)
igraph::as_data_frame(final_network, what = 'vertices') %>%View
# new
kernel <- 'raw'
diffusion_scores <- diffuStats::diffuse(graph = ppi_painted_filt_giant,
scores = scores,
method = kernel)
# test plotting
set.seed(4)
ggn <- ggnetwork(network)
ggn <- ggnetwork(final_network)
ggplot(ggn, aes(x = x, y = y, xend = xend, yend = yend)) +
geom_edges() +
geom_nodes(aes(color = logFC, size = betweenness), alpha = 0.65) +
geom_nodetext_repel(aes(label = Symbol), size = 2.5) +
geom_nodelabel_repel(data=subset(ggn, Symbol == 'MYC'), aes(label=Symbol)) +
scale_color_gradient(low = 'blue', high = 'red') +
scale_size_continuous(range = c(5, 25)) +
theme_blank()
ggplot(ggn, aes(x = x, y = y, xend = xend, yend = yend)) +
geom_edges() +
geom_nodes(aes(color = logFC, size = diffusion_score), alpha = 0.65) +
geom_nodetext_repel(aes(label = Symbol), size = 2.5) +
geom_nodelabel_repel(data=subset(ggn, Symbol == 'MYC'), aes(label=Symbol)) +
scale_color_gradient(low = 'blue', high = 'red') +
scale_size_continuous(range = c(5, 25)) +
theme_blank()
min_diff_score <- 0.05
# filter network to only include scores
final_network <- attribute_filter(ppi_painted_filt_giant,
diffusion_score > min_diff_score)
# test plotting
set.seed(4)
ggn <- ggnetwork(final_network)
ggplot(ggn, aes(x = x, y = y, xend = xend, yend = yend)) +
geom_edges() +
geom_nodes(aes(color = logFC, size = diffusion_score), alpha = 0.65) +
geom_nodetext_repel(aes(label = Symbol), size = 2.5) +
geom_nodelabel_repel(data=subset(ggn, Symbol == 'MYC'), aes(label=Symbol)) +
scale_color_gradient(low = 'blue', high = 'red') +
scale_size_continuous(range = c(5, 25)) +
theme_blank()
min_diff_score <- 0.15
# test plotting
set.seed(4)
# filter network to only include scores
final_network <- attribute_filter(ppi_painted_filt_giant,
diffusion_score > min_diff_score)
# test plotting
set.seed(4)
ggn <- ggnetwork(final_network)
ggplot(ggn, aes(x = x, y = y, xend = xend, yend = yend)) +
geom_edges() +
geom_nodes(aes(color = logFC, size = diffusion_score), alpha = 0.65) +
geom_nodetext_repel(aes(label = Symbol), size = 2.5) +
geom_nodelabel_repel(data=subset(ggn, Symbol == 'MYC'), aes(label=Symbol)) +
scale_color_gradient(low = 'blue', high = 'red') +
scale_size_continuous(range = c(5, 25)) +
theme_blank()
View(as_data_frame(final_network, what = 'vertices'))
View(igraph::as_data_frame(final_network, what = 'vertices'))
# load relevant packages
library(STRINGdb)
library(ggnetwork)
library(ggplot2)
library(igraph)
library(dplyr)
library(glue)
# load all package functions
devtools::load_all()
# read differential expression data (annotated with gene symbols)
de_string <- readRDS('data/de_string.RDS')
# select MYC condition as an example
myc_de <- de_string$MYC
# define globals
deg <- myc_de
edge_conf_score_min <- 950
logFC_min <- 1.5
pvalue_max <- 0.05
causal_gene_symbol <- 'MYC'
final_results <- c()
export_network <- FALSE
n_sim <- 9999
# new
kernel <- 'raw'
min_diff_score <- 0.15
grid <- FALSE
# network generation ------------------------------------------------------
# generate protein association network
string_db <- STRINGdb::STRINGdb$new(version="11",
species=9606,
score_threshold=edge_conf_score_min)
ppi <- string_db$get_graph()
# map DEA results onto ppi network
ppi_painted <- df_to_vert_attr(graph=ppi2, df=deg, common="STRING_id",
attr_name = c("Symbol", "ID", "logFC", "AveExpr",
"t", "P.Value", "adj.P.Val", "B"))
# filter to only include genes that are also in the DEG results - check this
ppi2 <- attribute_filter(ppi, name %in% deg$STRING_id)
# map DEA results onto ppi network
ppi_painted <- df_to_vert_attr(graph=ppi2, df=deg, common="STRING_id",
attr_name = c("Symbol", "ID", "logFC", "AveExpr",
"t", "P.Value", "adj.P.Val", "B"))
# seed the graph based on the fold-change and pvalue thresholds
ppi_painted_filt <- attribute_seed(ppi_painted,
abs(logFC) > log2(logFC_min) & adj.P.Val < pvalue_max)
# select the connected subgraph
ppi_painted_filt_giant <- connected_subgraph(ppi_painted_filt)
# simulate diffusion
scores <- as_data_frame(vertex_attr(ppi_painted_filt_giant))$seed
names(scores) <- as_data_frame(vertex_attr(ppi_painted_filt_giant))$name
diffusion_scores <- diffuStats::diffuse(graph = ppi_painted_filt_giant,
scores = scores,
method = kernel)
ppi_painted_filt_giant <- igraph::set_vertex_attr(ppi_painted_filt_giant,
name = 'diffusion_score',
value = diffusion_scores)
# filter network to only include scores
final_network <- attribute_filter(ppi_painted_filt_giant,
diffusion_score > min_diff_score)
View(igraph::as_data_frame(final_network, what = 'vertices'))
View(igraph::as_data_frame(ppi_painted_filt_giant, what = 'vertices'))
View(igraph::as_data_frame(ppi_painted_filt, what = 'vertices'))
View(igraph::as_data_frame(ppi_painted, what = 'vertices'))
View(igraph::as_data_frame(ppi_painted, what = 'vertices'))
View(igraph::as_data_frame(ppi2, what = 'vertices'))
# find the STRING ID for the causal gene
xref <- data.frame(symbol = causal_gene_symbol)
xref <- string_db$map(xref, "symbol", removeUnmappedRows=T, quiet=T)
xref
View(igraph::as_data_frame(ppi, what = 'vertices'))
View(deg)
# load relevant packages
library(STRINGdb)
library(ggnetwork)
library(ggplot2)
library(igraph)
library(dplyr)
<<<<<<< Updated upstream
library(glue)
# load all package functions
devtools::load_all()
# read differential expression data (annotated with gene symbols)
de_string <- readRDS('data/de_string_v11.RDS')
# select MYC condition as an example
myc_de <- de_string$MYC
# define globals
deg <- myc_de
edge_conf_score_min <- 950
logFC_min <- 1.5
pvalue_max <- 0.05
causal_gene_symbol <- 'MYC'
final_results <- c()
export_network <- FALSE
n_sim <- 9999
# new
kernel <- 'raw'
min_diff_score <- 0.15
grid <- FALSE
# generate protein association network
string_db <- STRINGdb::STRINGdb$new(version="11",
species=9606,
score_threshold=edge_conf_score_min)
ppi <- string_db$get_graph()
View(deg)
# in the DEG results:
MYC_stringID <-'9606.ENSP00000479618'
View(igraph::as_data_frame(ppi, what = 'vertices'))
# filter to only include genes that are also in the DEG results - check this
ppi2 <- attribute_filter(ppi, name %in% deg$STRING_id)
View(igraph::as_data_frame(ppi2, what = 'vertices'))
# map DEA results onto ppi network
ppi_painted <- df_to_vert_attr(graph=ppi2, df=deg, common="STRING_id",
attr_name = c("Symbol", "ID", "logFC", "AveExpr",
"t", "P.Value", "adj.P.Val", "B"))
# seed the graph based on the fold-change and pvalue thresholds
ppi_painted_filt <- attribute_seed(ppi_painted,
abs(logFC) > log2(logFC_min) & adj.P.Val < pvalue_max)
# select the connected subgraph
ppi_painted_filt_giant <- connected_subgraph(ppi_painted_filt)
# simulate diffusion
scores <- as_data_frame(vertex_attr(ppi_painted_filt_giant))$seed
names(scores) <- as_data_frame(vertex_attr(ppi_painted_filt_giant))$name
diffusion_scores <- diffuStats::diffuse(graph = ppi_painted_filt_giant,
scores = scores,
method = kernel)
ppi_painted_filt_giant <- igraph::set_vertex_attr(ppi_painted_filt_giant,
name = 'diffusion_score',
value = diffusion_scores)
# filter network to only include scores
final_network <- attribute_filter(ppi_painted_filt_giant,
diffusion_score > min_diff_score)
View(igraph::as_data_frame(ppi, what = 'vertices'))
View(igraph::as_data_frame(final_network, what = 'vertices'))
View(igraph::as_data_frame(ppi_painted_filt_giant, what = 'vertices'))
# test plotting
set.seed(4)
ggn <- ggnetwork(final_network)
View(igraph::as_data_frame(ppi_painted_filt_giant, what = 'edges'))
sum(duplicated(igraph::as_data_frame(ppi_painted_filt_giant, what = 'edges')))
sum(duplicated(igraph::as_data_frame(ppi_painted_filt_giant, what = 'edges')))/nrow(igraph::as_data_frame(ppi_painted_filt_giant, what = 'edges'))
final_network_simple <- igraph::simplify(final_network)
sum(duplicated(igraph::as_data_frame(ppi_painted_filt_giant, what = 'edges')))/nrow(igraph::as_data_frame(ppi_painted_filt_giant, what = 'edges'))
sum(duplicated(igraph::as_data_frame(final_network_simple, what = 'edges')))/nrow(igraph::as_data_frame(final_network_simple, what = 'edges'))
# test plotting
set.seed(4)
ggn <- ggnetwork(final_network)
ggn <- ggnetwork(final_network_simple)
ggplot(ggn, aes(x = x, y = y, xend = xend, yend = yend)) +
geom_edges() +
geom_nodes(aes(color = logFC, size = diffusion_score), alpha = 0.65) +
geom_nodetext_repel(aes(label = Symbol), size = 2.5) +
geom_nodelabel_repel(data=subset(ggn, Symbol == 'MYC'), aes(label=Symbol)) +
scale_color_gradient(low = 'blue', high = 'red') +
scale_size_continuous(range = c(5, 25)) +
theme_blank()
ggplot(ggn, aes(x = x, y = y, xend = xend, yend = yend)) +
geom_edges() +
geom_nodes(aes(color = logFC, size = diffusion_score), alpha = 0.65) +
geom_nodetext_repel(aes(label = Symbol), size = 2.5) +
geom_nodelabel_repel(data=subset(ggn, Symbol == 'MYCN'), aes(label=Symbol)) +
scale_color_gradient(low = 'blue', high = 'red') +
scale_size_continuous(range = c(5, 25)) +
theme_blank()
View(igraph::as_data_frame(ppi_painted_filt_giant, what = 'vertices'))
View(igraph::as_data_frame(final_network_simple, what = 'vertices'))
View(igraph::as_data_frame(final_network, what = 'vertices'))
View(igraph::as_data_frame(ppi_painted_filt_giant, what = 'vertices'))
# find the STRING ID for the causal gene
xref <- data.frame(symbol = causal_gene_symbol)
xref <- string_db$map(xref, "symbol", removeUnmappedRows=T, quiet=T)
# calculate similarity of each node and slice out the causal gene
sim <- igraph::similarity(ppi)
index <- which(igraph::V(ppi)$name == xref$STRING_id)
causal_sim <- sim[index,]
# make scores a named vector
names(causal_sim) <- igraph::V(ppi)$name
# get the scores associated with the subnetwork
pred_scores <- causal_sim[igraph::V(ppi_painted_filt_giant)$name]
mean_pred_score <- mean(pred_scores)
# create a key mapping STRING id to gene symbol for all genes
key <- data.frame(symbol = deg$Symbol)
key <- string_db$map(key, "symbol", removeUnmappedRows=T, quiet=T)
# select top genes and annotate for readability
top_genes <- sort(pred_scores, decreasing = TRUE)
top_genes_df <- data.frame(score = top_genes,
STRING_id  = names(top_genes))
top_genes_df <- dplyr::left_join(top_genes_df, key)
rownames(top_genes_df) <- NULL
# estimate uncertainty with a random draw of the full ppi graph
n_sim <- 9999
n_draws <- length(igraph::V(ppi_painted_filt_giant)) #151
samples <- lapply(1:n_sim, function(x) sample(causal_sim, n_draws))
sample_means <- sapply(samples, mean)
# calculate p
score_pval <- sum(sample_means > mean_pred_score) / n_sim
View(top_genes)
View(top_genes_df)
# dataframe of final graph results
network_df <- igraph::as_data_frame(final_network_simple, what = 'vertices')
View(network_df)
network_df <- dplyr::arrange(network_df, -diffusion_score)
rownames(network_df) <- NULL
=======
library(tidyr)
myc_results <- readRDS('results/MYC/parameter_grid_pvalue_logFC.RDS')
ras_results <- readRDS('results/HRAS/parameter_grid_pvalue_logFC.RDS')
ggplot(myc_results, aes(x = logFC, y = mean_score, group=type)) +
facet_wrap(~type, scales = "free") +
geom_line(aes(color=type)) +
geom_line(aes(y = sample_mean, color='sample_mean')) +
geom_line(aes(y = sample_sd, color='sample_sd'))
ggplot(myc_results, aes(x = logFC, y = mean_score, group=connected_filter)) +
facet_wrap(~type, scales = "free") +
geom_line(aes(color=connected_filter)) +
geom_line(aes(y = sample_mean, color='sample_mean')) +
geom_line(aes(y = sample_sd, color='sample_sd'))
ggplot(myc_results, aes(x = logFC, y = mean_score, group=connected_filter)) +
facet_wrap(~connected_filter, scales = "free") +
geom_line(aes(color=connected_filter)) +
geom_line(aes(y = sample_mean, color='sample_mean')) +
geom_line(aes(y = sample_sd, color='sample_sd'))
ggplot(ras_results, aes(x = logFC, y = mean_score, group=connected_filter)) +
facet_wrap(~connected_filter, scales = "free") +
geom_line(aes(color=connected_filter)) +
geom_line(aes(y = sample_mean, color='sample_mean')) +
geom_line(aes(y = sample_sd, color='sample_sd'))
View(myc_results)
ggplot(myc_results, aes(x = Adj.P, y = mean_score, group=connected_filter)) +
facet_wrap(~connected_filter, scales = "free") +
geom_line(aes(color=connected_filter)) +
geom_line(aes(y = sample_mean, color='sample_mean')) +
geom_line(aes(y = sample_sd, color='sample_sd'))
ggplot(ras_results, aes(x = Adj.P, y = mean_score, group=connected_filter)) +
facet_wrap(~connected_filter, scales = "free") +
geom_line(aes(color=connected_filter)) +
geom_line(aes(y = sample_mean, color='sample_mean')) +
geom_line(aes(y = sample_sd, color='sample_sd'))
ggplot(myc_results, aes(x = target_neighbors_in_final, y = mean_score, group=connected_filter)) +
facet_wrap(~connected_filter, scales = "free") +
geom_line(aes(color=connected_filter)) +
geom_line(aes(y = sample_mean, color='sample_mean')) +
geom_line(aes(y = sample_sd, color='sample_sd'))
ggplot(ras_results, aes(x = target_neighbors_in_final, y = mean_score, group=connected_filter)) +
facet_wrap(~connected_filter, scales = "free") +
geom_line(aes(color=connected_filter)) +
geom_line(aes(y = sample_mean, color='sample_mean')) +
geom_line(aes(y = sample_sd, color='sample_sd'))
ggplot(myc_results, aes(x = target_neighbors_in_final, y = z_score, group=connected_filter)) +
facet_wrap(~connected_filter, scales = "free") +
geom_line(aes(color=connected_filter)) +
geom_line(aes(y = sample_mean, color='sample_mean')) +
geom_line(aes(y = sample_sd, color='sample_sd'))
ggplot(myc_results, aes(x = logFC, y = z_score, group=connected_filter)) +
facet_wrap(~connected_filter, scales = "free") +
geom_line(aes(color=connected_filter)) +
geom_line(aes(y = sample_mean, color='sample_mean')) +
geom_line(aes(y = sample_sd, color='sample_sd'))
ggplot(ras_results, aes(x = logFC, y = z_score, group=connected_filter)) +
facet_wrap(~connected_filter, scales = "free") +
geom_line(aes(color=connected_filter)) +
geom_line(aes(y = sample_mean, color='sample_mean')) +
geom_line(aes(y = sample_sd, color='sample_sd'))
count(myc_results, logFC, Adj.P, connected_filter)
check()
library(devtools)
check()
check(vignettes = FALSE)
library(devtools)
check(vignettes = FALSE)
library(magrittr)
library(textshape)
library(ggplot2)
library(dplyr)
library(tidyr)
library(tictoc) # to assess performance of parallel processing
devtools::load_all()
# Load differential expression data (annotated with gene symbols)
de_string <- readRDS('data/de_string_v11.RDS')
# select HRAS condition as an example
RAS_de <- de_string$RAS
deg <- RAS_de
target <- 'HRAS'
# generate parameter grid
# pipeline_vec <- c('centrality')
# connected_filter <- c('TRUE', 'FALSE')
# threshold_vec <- c(950)
# logFC_vec <- seq(1.0, 2.0, 0.1)
# Adj.P_vec <- seq(0.005, 0.05, 0.005)
# single example
pipeline_vec <- c('centrality')
connected_filter <- c('TRUE')
threshold_vec <- c(950)
logFC_vec <- 2.0
Adj.P_vec <- 0.05
parameter_grid <- expand.grid(pipeline = pipeline_vec,
connected_filter = connected_filter,
threshold=threshold_vec,
logFC=logFC_vec,
Adj.P=Adj.P_vec)
View(parameter_grid)
tic()
results <- parameter_grid(deg = RAS_de,
target = 'HRAS',
grid = parameter_grid,
n_cores = 2,
n_cores = 4,
weighted = FALSE)
toc()
tic()
results <- parameter_grid(deg = RAS_de,
target = 'HRAS',
grid = parameter_grid,
n_cores = 2,
weighted = FALSE)
toc()
View(results)
library(devtools)
check(vignettes = FALSE)
>>>>>>> Stashed changes
